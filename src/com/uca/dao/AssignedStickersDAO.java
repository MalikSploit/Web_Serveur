package com.uca.dao;

import com.uca.entity.StudentEntity;
import com.uca.entity.AssignedStickerEntity;
import com.uca.entity.StickerEntity;
import com.uca.entity.ProfEntity;
import com.uca.exceptions.ServiceException;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

public class AssignedStickersDAO extends _Generic<AssignedStickerEntity> {

    public ArrayList<AssignedStickerEntity> getAllStickersByStudentId(int id) throws ServiceException {
        try {
            ArrayList<AssignedStickerEntity> entities = new ArrayList<>();
            PreparedStatement preparedStatement = this.connect.prepareStatement("SELECT ga.id as id, ga.reason as reason, ga.assignation_date as assignation_date, e.id as student_id, p.id as prof_id, g.id as sticker_id, e.firstname as student_firstname, e.lastname as student_lastname, e.class as student_class, p.lastname as prof_lastname, p.firstname as prof_firstname, g.color as sticker_color, g.description as sticker_description FROM assigned_stickers AS ga INNER JOIN students AS e ON e.id=ga.student_id INNER JOIN profs AS p ON p.id=ga.prof_id INNER JOIN stickers AS g ON g.id=ga.sticker_id  WHERE ga.student_id=? ORDER BY ga.id ASC;");

            preparedStatement.setInt(1, id);

            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                entities.add(parseFromResultSet(resultSet));
            }

            return entities;
        } catch (SQLException e) {
            e.printStackTrace();
            throw new ServiceException("Could not count professors.");
        }
    }

    public ArrayList<AssignedStickerEntity> getAllStickersByProfId(int id) throws ServiceException {
        try {
            ArrayList<AssignedStickerEntity> entities = new ArrayList<>();
            PreparedStatement preparedStatement = this.connect.prepareStatement("SELECT ga.id as id, ga.reason as reason, ga.assignation_date as assignation_date, e.id as student_id, p.id as prof_id, g.id as sticker_id, e.firstname as student_firstname, e.lastname as student_lastname, e.class as student_class, p.lastname as prof_lastname, p.firstname as prof_firstname, g.color as sticker_color, g.description as sticker_description FROM assigned_stickers AS ga INNER JOIN students AS e ON e.id=ga.student_id INNER JOIN profs AS p ON p.id=ga.prof_id INNER JOIN stickers AS g ON g.id=ga.sticker_id  WHERE ga.prof_id=? ORDER BY ga.id ASC;");
            preparedStatement.setInt(1, id);

            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                entities.add(parseFromResultSet(resultSet));
            }
            return entities;
        } catch (SQLException e) {
            e.printStackTrace();
            throw new ServiceException("Could not count professors.");
        }
    }

    @Override
    public void deleteById(int id) throws ServiceException {
        try {
            PreparedStatement preparedStatement = this.connect.prepareStatement("DELETE FROM assigned_stickers WHERE id = ?;");
            preparedStatement.setInt(1, id);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            throw new ServiceException("Could not count professors.");
        }
    }


    @Override
    public AssignedStickerEntity create(AssignedStickerEntity obj) throws ServiceException {
        try {
            PreparedStatement preparedStatement = this.connect.prepareStatement("INSERT INTO assigned_stickers(sticker_id, prof_id, student_id, reason) VALUES(?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
            preparedStatement.setInt(1, obj.getSticker().getId());
            preparedStatement.setInt(2, obj.getProf().getId());
            preparedStatement.setInt(3, obj.getStudent().getId());
            preparedStatement.setString(4, obj.getReason());
            preparedStatement.executeUpdate();

            //Auto-incremented values generated by the current PreparedStatement object
            ResultSet res = preparedStatement.getGeneratedKeys();
            res.next();
            obj.setId(res.getInt(1));

            return obj;
        } catch (SQLException e) {
            e.printStackTrace();
            throw new ServiceException("Could not count professors.");
        }
    }


    @Override
    public ArrayList<AssignedStickerEntity> getAll() throws ServiceException {
        throw new ServiceException("Not implemented !");
    }

    @Override
    public AssignedStickerEntity getById(int id) throws ServiceException {
        throw new ServiceException("Not implemented !");
    }

    @Override
    public void update(int id, AssignedStickerEntity obj) throws ServiceException {
        throw new ServiceException("Not implemented !");
    }

    // --------- Private Methods

    private AssignedStickerEntity parseFromResultSet(ResultSet resultSet) throws SQLException {

        AssignedStickerEntity entity = new AssignedStickerEntity();
        entity.setId(resultSet.getInt("id"));
        entity.setDate(resultSet.getTimestamp("assignation_date"));
        entity.setReason(resultSet.getString("reason"));

        // Maintenant je dois cr√©er les sous-objets profs, eleve et gommette qui correspondent.
        ProfEntity prof = new ProfEntity();
        prof.setId(resultSet.getInt("prof_id"));
        prof.setFirstName(resultSet.getString("prof_firstname"));
        prof.setLastName(resultSet.getString("prof_lastname"));
        entity.setProf(prof);

        StudentEntity eleve = new StudentEntity();
        eleve.setId(resultSet.getInt("student_id"));
        eleve.setLastName(resultSet.getString("student_lastname"));
        eleve.setFirstName(resultSet.getString("student_firstname"));
        eleve.setClassroom(resultSet.getString("student_class"));
        entity.setStudent(eleve);

        StickerEntity gommette = new StickerEntity();
        gommette.setId(resultSet.getInt("sticker_id"));
        gommette.setColor(resultSet.getString("sticker_color"));
        gommette.setDescription(resultSet.getString("sticker_description"));
        entity.setSticker(gommette);
        return entity;
    }

}
