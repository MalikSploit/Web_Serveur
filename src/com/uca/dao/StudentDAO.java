package com.uca.dao;

import com.uca.entity.StudentEntity;
import com.uca.exceptions.ServiceException;

import java.sql.*;
import java.util.ArrayList;

public class StudentDAO extends _Generic<StudentEntity> {

    @Override
    public ArrayList<StudentEntity> getAll() throws ServiceException {
        try {
            ArrayList<StudentEntity> entities = new ArrayList<>();
            PreparedStatement preparedStatement = this.connect.prepareStatement("SELECT * FROM students ORDER BY id ASC;");
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                StudentEntity entity = parseFromResultSet(resultSet);
                entities.add(entity);
            }
            return entities;
        } catch (SQLException e){
            e.printStackTrace();
            throw new ServiceException("Could not retrieve students.");
        }
    }


    @Override
    public StudentEntity getById(int id) throws ServiceException {
        try {
            StudentEntity studentEntity = new StudentEntity();
            PreparedStatement preparedStatement = this.connect.prepareStatement("SELECT * FROM students WHERE id = ? LIMIT 1;");
            preparedStatement.setInt(1, id);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                studentEntity = parseFromResultSet(resultSet);
            }
            return studentEntity;
        } catch (SQLException e){
            e.printStackTrace();
            throw new ServiceException("Could not retrieve student id " + id);
        }
    }

    @Override
    public void deleteById(int id) throws ServiceException {
        try {
            PreparedStatement preparedStatement = this.connect.prepareStatement("DELETE FROM assigned_stickers WHERE eleve_id = ?;");
            preparedStatement.setInt(1, id);
            preparedStatement.executeUpdate();

            preparedStatement = this.connect.prepareStatement("DELETE FROM students WHERE id = ?;");
            preparedStatement.setInt(1, id);
            preparedStatement.executeUpdate();
        } catch (SQLException e){
            e.printStackTrace();
            throw new ServiceException("Could not delete student id " + id);
        }
    }

    @Override
    public void update(int id, StudentEntity obj) throws ServiceException {
        try {
            PreparedStatement preparedStatement = this.connect.prepareStatement("UPDATE students SET lastname=?, firstname=?, class=? WHERE id=?;");
            preparedStatement.setString(1, obj.getLastName());
            preparedStatement.setString(2, obj.getFirstName());
            preparedStatement.setString(3, obj.getClassroom());
            preparedStatement.setInt(4, id);
            preparedStatement.executeUpdate();
        } catch (SQLException e){
            e.printStackTrace();
            throw new ServiceException("Could not update student id " + id);
        }
    }


    @Override
    public StudentEntity create(StudentEntity obj) throws ServiceException {
        try {
            PreparedStatement preparedStatement = this.connect.prepareStatement("INSERT INTO students(lastname, firstname, class) VALUES(?,?,?)", Statement.RETURN_GENERATED_KEYS);
            preparedStatement.setString(1, obj.getLastName());
            preparedStatement.setString(2, obj.getFirstName());
            preparedStatement.setString(3, obj.getClassroom());
            preparedStatement.executeUpdate();

            //Auto-incremented values generated by the current PreparedStatement object
            ResultSet res = preparedStatement.getGeneratedKeys();
            res.next();
            obj.setId(res.getInt(1));

            return obj;
        } catch (SQLException e) {
            e.printStackTrace();
            throw new ServiceException("Could not create student.");
        }
    }

    // --------- Méthodes privées

    private StudentEntity parseFromResultSet(ResultSet resultSet) throws SQLException {
        StudentEntity entity = new StudentEntity();
        entity.setId(resultSet.getInt("id"));
        entity.setFirstName(resultSet.getString("firstname"));
        entity.setLastName(resultSet.getString("lastname"));
        entity.setClassroom(resultSet.getString("class"));
        return entity;
    }
}
